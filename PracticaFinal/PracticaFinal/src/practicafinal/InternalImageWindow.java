/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicafinal;

import com.github.sarxos.webcam.Webcam;
import java.awt.image.BufferedImage;
import java.io.File;
import javafx.scene.Camera;
import javax.swing.JInternalFrame;
import sm.jj.iu.Lienzo2D;
import sm.jj.iu.Lienzo2DImagen;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;

/**
 * Ventana interna tipo Imagen
 * 
 * Hereda de InternalWindowSM
 * 
 * @author Jota
 */
public class InternalImageWindow extends InternalWindowSM {

    /**
     * Iiw : objeto tipo InternaImageWindow
     * mainWindow : devuelve el padre(objeto mainWindow) de iiw
     */
    private static InternalImageWindow iiw;
    private mainWindow parent=null;
    
    /**
     * Constructor de la clase
     * 
     * @param parent padre
     */
    public InternalImageWindow(mainWindow parent) {
        initComponents();
        System.out.println("asigna el padre");
        this.parent = parent;
    }

    public InternalImageWindow(){
        initComponents();
    }
    
    /**
     * Devuelve el lienzo 
     * 
     * @return lienzo2DImagen1 tipo Lienzo2DImagen
     */
    public Lienzo2DImagen getLienzo(){
        return this.lienzo2DImagen1;
    }
    
    /**
     * Devueve la ventana interna de tipo imagen
     * 
     * @return iiw objeto InternalImageWindow
     */
    public static InternalImageWindow getInstance(){
        if(iiw==null){
            iiw = new InternalImageWindow();
            System.out.println("Creamos uno nuevo");
        }
        return iiw;
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lienzo2DImagen1 = new sm.jj.iu.Lienzo2DImagen();

        javax.swing.GroupLayout lienzo2DImagen1Layout = new javax.swing.GroupLayout(lienzo2DImagen1);
        lienzo2DImagen1.setLayout(lienzo2DImagen1Layout);
        lienzo2DImagen1Layout.setHorizontalGroup(
            lienzo2DImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 382, Short.MAX_VALUE)
        );
        lienzo2DImagen1Layout.setVerticalGroup(
            lienzo2DImagen1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(lienzo2DImagen1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private sm.jj.iu.Lienzo2DImagen lienzo2DImagen1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * No devuelve nada , para control de ventanas
     * 
     * @return 
     */
    @Override
    public Webcam getCam() {
        return null;
    }
    
    /**
     * No devuelve nada , para control de ventanas
     * 
     * @param f
     * @return 
     */
    @Override
    public EmbeddedMediaPlayer getShot(File f) {
        return null;
    }

    /**
     * Devuelve la imagen del lienzo
     * 
     * @return objeto tipo BufferedImage 
     */
    @Override
    public BufferedImage getImage() {
        return this.getLienzo().getImage(true);
    }

    
}
