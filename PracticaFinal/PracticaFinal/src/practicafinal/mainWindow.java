/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicafinal;

import com.github.sarxos.webcam.Webcam;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import static java.lang.Math.abs;
import static java.lang.Math.sin;
import static java.lang.Math.toRadians;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.TintOp;
import sm.jj.imagen.MyFunction;
import sm.jj.imagen.MyLookUp;
import sm.jj.imagen.PiOp;
import sm.jj.imagen.SepiaOp;
import sm.jj.imagen.UmbralizacionOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;
import static sun.audio.AudioPlayer.player;

/**
 * Ventana principal 
 * 
 * Hereda de javax.swing.JFrame
 * 
 * @author Jota
 */
public class mainWindow extends javax.swing.JFrame {

    /**
     * color : objeto de tipo Color(borde de una forma)
     * secondColor : objeto de tipo Color (relleno de una forma)
     * player : objeto de tipo SMPlayer(para reproducir)
     * vi : ventan interna de tipo imagen
     * imgSource : objeto de tipor BufferedImage(imagen fuente) 
     */
    Color color = new Color(0,0,0);
    Color secondColor = new Color(0,0,0);
    SMPlayer player = null;
    SMSoundRecorder rec = null;
    InternalWindowSM vi = new InternalImageWindow(this);
    private BufferedImage imgSource;
    
    /**
     * Constructor de la clase
     */
    public mainWindow() {
        initComponents();
    }
    
    public void buildToolTopTextButton(){
    
    }
    
    
    /**
     * Para el correcto funcionamiento de los botones referidos a "Play" y "Record"
     * Si se esta reproduciendo "Play" : deshabilidato "Record" : deshabilitado
     * Si se para la reproduccion "Play" : habilitado "Record" : habilitado
     */
    public class manejadorAudio implements LineListener {
        @Override
        public void update(LineEvent event){
            if(event.getType() == LineEvent.Type.START){
                playButton.setEnabled(false);
                recordButton.setEnabled(false);
            }
            if(event.getType() == LineEvent.Type.STOP){
               playButton.setEnabled(true);
               recordButton.setEnabled(true);
            }
        }
    }
    /**
     * Para el correcto funcionamiento de los botones referidos a "Play" y "Record"
     * Si se esta grabando "Play" : deshabilidato "Record" : deshabilitado
     * Si se para la grabacion "Play" : habilitado "Record" : habilitado
     */
    public class manejadorGrabacion implements LineListener {
        @Override
        public void update(LineEvent event){
            if(event.getType() == LineEvent.Type.START){
               recordButton.setEnabled(false);
               playButton.setEnabled(false);
            }
            if(event.getType() == LineEvent.Type.STOP){
               recordButton.setEnabled(true);
               playButton.setEnabled(true);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formGroupButton = new javax.swing.ButtonGroup();
        filledGroupButton = new javax.swing.ButtonGroup();
        toolBarTop = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        separator = new javax.swing.JToolBar.Separator();
        pointButton = new javax.swing.JToggleButton();
        lineButton = new javax.swing.JToggleButton();
        rectButton = new javax.swing.JToggleButton();
        ovalButton = new javax.swing.JToggleButton();
        lineArcButton = new javax.swing.JToggleButton();
        espiralButton = new javax.swing.JToggleButton();
        freeDrawButton = new javax.swing.JToggleButton();
        myFormButton = new javax.swing.JToggleButton();
        editButton = new javax.swing.JToggleButton();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        moveUpAllButton = new javax.swing.JButton();
        moveDownAllButton = new javax.swing.JButton();
        separator2 = new javax.swing.JToolBar.Separator();
        BorderColorPanel = new javax.swing.JPanel();
        BackgroundColorPanel = new javax.swing.JPanel();
        thiknesSpinner = new javax.swing.JSpinner();
        TypeStrokeBox = new javax.swing.JComboBox<>();
        filledButton = new javax.swing.JToggleButton();
        filledVButton = new javax.swing.JToggleButton();
        filledHButton = new javax.swing.JToggleButton();
        ClarityButton = new javax.swing.JToggleButton();
        ClaritySlider = new javax.swing.JSlider();
        SmoothButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        listSoundBox = new javax.swing.JComboBox<>();
        recordButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        camButton = new javax.swing.JButton();
        shotButton = new javax.swing.JButton();
        panelFooter = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        toolBarDown = new javax.swing.JToolBar();
        CopyButton = new javax.swing.JButton();
        shinePanel = new javax.swing.JPanel();
        shineSlider = new javax.swing.JSlider();
        filterPanel = new javax.swing.JPanel();
        filterBox = new javax.swing.JComboBox<>();
        contrastPanel = new javax.swing.JPanel();
        contrastButton = new javax.swing.JButton();
        negativeButton = new javax.swing.JButton();
        lightButton = new javax.swing.JButton();
        darkButton = new javax.swing.JButton();
        myLookUpTable = new javax.swing.JButton();
        PiOpButton = new javax.swing.JButton();
        ghostButton = new javax.swing.JButton();
        noNamePanel = new javax.swing.JPanel();
        sinButton = new javax.swing.JButton();
        sepiaButton = new javax.swing.JButton();
        tintaButton = new javax.swing.JButton();
        ecualizarButton = new javax.swing.JButton();
        colorPanel = new javax.swing.JPanel();
        bandButton = new javax.swing.JButton();
        changeBandBox = new javax.swing.JComboBox<>();
        rotationPanel = new javax.swing.JPanel();
        rotationSlider = new javax.swing.JSlider();
        rota90Button = new javax.swing.JButton();
        rota180Button = new javax.swing.JButton();
        rota270Button = new javax.swing.JButton();
        escalePanel = new javax.swing.JPanel();
        maxButton = new javax.swing.JButton();
        minButton = new javax.swing.JButton();
        thresholdingPanel = new javax.swing.JPanel();
        thresholdingSlider = new javax.swing.JSlider();
        mainDesktop = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        toolBarUpMenu = new javax.swing.JMenuItem();
        toolBarDownMenu = new javax.swing.JMenuItem();
        imageMenu = new javax.swing.JMenu();
        versionMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1758, 1500));

        toolBarTop.setRollover(true);

        newButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\nuevo.png")); // NOI18N
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(newButton);

        openButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\abrir.png")); // NOI18N
        openButton.setFocusable(false);
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(openButton);

        saveButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\guardar.png")); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(saveButton);
        toolBarTop.add(separator);

        formGroupButton.add(pointButton);
        pointButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\punto.png")); // NOI18N
        pointButton.setToolTipText("Point");
        pointButton.setFocusable(false);
        pointButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pointButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(pointButton);

        formGroupButton.add(lineButton);
        lineButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\linea.png")); // NOI18N
        lineButton.setToolTipText("Line");
        lineButton.setFocusable(false);
        lineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(lineButton);

        formGroupButton.add(rectButton);
        rectButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\rectangulo.png")); // NOI18N
        rectButton.setToolTipText("Rectangle");
        rectButton.setFocusable(false);
        rectButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(rectButton);

        formGroupButton.add(ovalButton);
        ovalButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\elipse.png")); // NOI18N
        ovalButton.setToolTipText("Ellipse");
        ovalButton.setFocusable(false);
        ovalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ovalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ovalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovalButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(ovalButton);

        formGroupButton.add(lineArcButton);
        lineArcButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\curveIcon.png")); // NOI18N
        lineArcButton.setToolTipText("Curve with a control point");
        lineArcButton.setFocusable(false);
        lineArcButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineArcButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineArcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineArcButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(lineArcButton);

        formGroupButton.add(espiralButton);
        espiralButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\EspiralIcon.png")); // NOI18N
        espiralButton.setToolTipText("Spiral");
        espiralButton.setFocusable(false);
        espiralButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        espiralButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        espiralButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espiralButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(espiralButton);

        formGroupButton.add(freeDrawButton);
        freeDrawButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\freeDrawIcon.png")); // NOI18N
        freeDrawButton.setToolTipText("Free Draw");
        freeDrawButton.setFocusable(false);
        freeDrawButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        freeDrawButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        freeDrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freeDrawButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(freeDrawButton);

        formGroupButton.add(myFormButton);
        myFormButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\MyFormIcon.png")); // NOI18N
        myFormButton.setToolTipText("My Form");
        myFormButton.setFocusable(false);
        myFormButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        myFormButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        myFormButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myFormButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(myFormButton);

        formGroupButton.add(editButton);
        editButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\seleccion.png")); // NOI18N
        editButton.setToolTipText("Edit");
        editButton.setFocusable(false);
        editButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(editButton);

        moveUpButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\upIcon.png")); // NOI18N
        moveUpButton.setToolTipText("One Up");
        moveUpButton.setFocusable(false);
        moveUpButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveUpButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(moveUpButton);

        moveDownButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\dowIcon.png")); // NOI18N
        moveDownButton.setToolTipText("One Down");
        moveDownButton.setFocusable(false);
        moveDownButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveDownButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(moveDownButton);

        moveUpAllButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\upAllIcon.png")); // NOI18N
        moveUpAllButton.setToolTipText("All Up");
        moveUpAllButton.setFocusable(false);
        moveUpAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveUpAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveUpAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpAllButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(moveUpAllButton);

        moveDownAllButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\downAllIcon.png")); // NOI18N
        moveDownAllButton.setToolTipText("All Down");
        moveDownAllButton.setFocusable(false);
        moveDownAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveDownAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveDownAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownAllButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(moveDownAllButton);
        toolBarTop.add(separator2);

        BorderColorPanel.setBackground(new java.awt.Color(0, 0, 0));
        BorderColorPanel.setToolTipText("Border Color");
        BorderColorPanel.setPreferredSize(new java.awt.Dimension(25, 25));
        BorderColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BorderColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout BorderColorPanelLayout = new javax.swing.GroupLayout(BorderColorPanel);
        BorderColorPanel.setLayout(BorderColorPanelLayout);
        BorderColorPanelLayout.setHorizontalGroup(
            BorderColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
        BorderColorPanelLayout.setVerticalGroup(
            BorderColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 33, Short.MAX_VALUE)
        );

        toolBarTop.add(BorderColorPanel);

        BackgroundColorPanel.setBackground(new java.awt.Color(255, 255, 255));
        BackgroundColorPanel.setToolTipText("Filling Color");
        BackgroundColorPanel.setPreferredSize(new java.awt.Dimension(25, 25));
        BackgroundColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackgroundColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout BackgroundColorPanelLayout = new javax.swing.GroupLayout(BackgroundColorPanel);
        BackgroundColorPanel.setLayout(BackgroundColorPanelLayout);
        BackgroundColorPanelLayout.setHorizontalGroup(
            BackgroundColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );
        BackgroundColorPanelLayout.setVerticalGroup(
            BackgroundColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 33, Short.MAX_VALUE)
        );

        toolBarTop.add(BackgroundColorPanel);

        thiknesSpinner.setToolTipText("Thickness");
        thiknesSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thiknesSpinnerStateChanged(evt);
            }
        });
        toolBarTop.add(thiknesSpinner);

        TypeStrokeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Continuas", "Discontinuas", "Discontinuas2" }));
        TypeStrokeBox.setToolTipText("Type Stroke");
        TypeStrokeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeStrokeBoxActionPerformed(evt);
            }
        });
        toolBarTop.add(TypeStrokeBox);

        filledGroupButton.add(filledButton);
        filledButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\rellenar.png")); // NOI18N
        filledButton.setToolTipText("Filling");
        filledButton.setFocusable(false);
        filledButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filledButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filledButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(filledButton);

        filledGroupButton.add(filledVButton);
        filledVButton.setText("DegradadoV");
        filledVButton.setToolTipText("Degradado vertical");
        filledVButton.setFocusable(false);
        filledVButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filledVButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filledVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledVButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(filledVButton);

        filledGroupButton.add(filledHButton);
        filledHButton.setText("DegradadoH");
        filledHButton.setToolTipText("Degradado horizontal");
        filledHButton.setFocusable(false);
        filledHButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        filledHButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        filledHButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filledHButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(filledHButton);

        ClarityButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\transparencia.png")); // NOI18N
        ClarityButton.setToolTipText("Clarity");
        ClarityButton.setFocusable(false);
        ClarityButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ClarityButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ClarityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClarityButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(ClarityButton);

        ClaritySlider.setToolTipText("Clarity Value");
        ClaritySlider.setValue(0);
        ClaritySlider.setEnabled(false);
        ClaritySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ClaritySliderStateChanged(evt);
            }
        });
        toolBarTop.add(ClaritySlider);

        SmoothButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\alisar.png")); // NOI18N
        SmoothButton.setToolTipText("Smooth");
        SmoothButton.setFocusable(false);
        SmoothButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SmoothButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SmoothButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmoothButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(SmoothButton);
        toolBarTop.add(jSeparator1);

        playButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\EntregaFinal\\iconos\\playIcon.png")); // NOI18N
        playButton.setToolTipText("Play");
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(playButton);

        stopButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\EntregaFinal\\iconos\\stopIcon.png")); // NOI18N
        stopButton.setToolTipText("Stop");
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(stopButton);

        listSoundBox.setToolTipText("List Sound");
        toolBarTop.add(listSoundBox);

        recordButton.setToolTipText("Record");
        recordButton.setFocusable(false);
        recordButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        recordButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        recordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(recordButton);
        toolBarTop.add(jSeparator2);

        camButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\EntregaFinal\\iconos\\webCamIcon.png")); // NOI18N
        camButton.setToolTipText("WebCam");
        camButton.setFocusable(false);
        camButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        camButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        camButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                camButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(camButton);

        shotButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\EntregaFinal\\iconos\\snapshotIcon.png")); // NOI18N
        shotButton.setToolTipText("Captura");
        shotButton.setFocusable(false);
        shotButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        shotButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        shotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shotButtonActionPerformed(evt);
            }
        });
        toolBarTop.add(shotButton);

        getContentPane().add(toolBarTop, java.awt.BorderLayout.PAGE_START);

        panelFooter.setLayout(new java.awt.BorderLayout());

        statusLabel.setToolTipText("");
        panelFooter.add(statusLabel, java.awt.BorderLayout.PAGE_END);

        toolBarDown.setRollover(true);

        CopyButton.setToolTipText("Copy Image");
        CopyButton.setFocusable(false);
        CopyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CopyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        CopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyButtonActionPerformed(evt);
            }
        });
        toolBarDown.add(CopyButton);

        shinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shine"));
        shinePanel.setLayout(new java.awt.BorderLayout());

        shineSlider.setMaximum(255);
        shineSlider.setMinimum(-255);
        shineSlider.setToolTipText("Shine Value");
        shineSlider.setValue(0);
        shineSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                shineSliderStateChanged(evt);
            }
        });
        shineSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                shineSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                shineSliderFocusLost(evt);
            }
        });
        shinePanel.add(shineSlider, java.awt.BorderLayout.CENTER);

        toolBarDown.add(shinePanel);

        filterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        filterPanel.setLayout(new java.awt.BorderLayout());

        filterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        filterBox.setToolTipText("Type Filter");
        filterBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBoxActionPerformed(evt);
            }
        });
        filterPanel.add(filterBox, java.awt.BorderLayout.CENTER);

        toolBarDown.add(filterPanel);

        contrastPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrast"));
        contrastPanel.setLayout(new javax.swing.BoxLayout(contrastPanel, javax.swing.BoxLayout.LINE_AXIS));

        contrastButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\contraste.png")); // NOI18N
        contrastButton.setToolTipText("Contrast Filter");
        contrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(contrastButton);

        negativeButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\contraste.png")); // NOI18N
        negativeButton.setToolTipText("Negative Filter");
        negativeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(negativeButton);

        lightButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\iluminar.png")); // NOI18N
        lightButton.setToolTipText("Light Filter");
        lightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lightButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(lightButton);

        darkButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\oscurecer.png")); // NOI18N
        darkButton.setToolTipText("Dark Filter");
        darkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(darkButton);

        myLookUpTable.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\PhiIcon.png")); // NOI18N
        myLookUpTable.setToolTipText("Gold Filter");
        myLookUpTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myLookUpTableActionPerformed(evt);
            }
        });
        contrastPanel.add(myLookUpTable);

        PiOpButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\PiIcon25.png")); // NOI18N
        PiOpButton.setToolTipText("Pi Filter");
        PiOpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PiOpButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(PiOpButton);

        ghostButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\ghostIcon.png")); // NOI18N
        ghostButton.setToolTipText("Ghost Filter");
        ghostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ghostButtonActionPerformed(evt);
            }
        });
        contrastPanel.add(ghostButton);

        toolBarDown.add(contrastPanel);

        noNamePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Operation"));
        noNamePanel.setLayout(new javax.swing.BoxLayout(noNamePanel, javax.swing.BoxLayout.LINE_AXIS));

        sinButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\sinusoidal.png")); // NOI18N
        sinButton.setToolTipText("Sin Filter");
        sinButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinButtonActionPerformed(evt);
            }
        });
        noNamePanel.add(sinButton);

        sepiaButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\sepia.png")); // NOI18N
        sepiaButton.setToolTipText("Sepia Filter");
        sepiaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaButtonActionPerformed(evt);
            }
        });
        noNamePanel.add(sepiaButton);

        tintaButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\tintar.png")); // NOI18N
        tintaButton.setToolTipText("Tinted Filter");
        tintaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tintaButtonActionPerformed(evt);
            }
        });
        noNamePanel.add(tintaButton);

        ecualizarButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\ecualizar.png")); // NOI18N
        ecualizarButton.setToolTipText("Equalize");
        ecualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ecualizarButtonActionPerformed(evt);
            }
        });
        noNamePanel.add(ecualizarButton);

        toolBarDown.add(noNamePanel);

        colorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        colorPanel.setLayout(new javax.swing.BoxLayout(colorPanel, javax.swing.BoxLayout.LINE_AXIS));

        bandButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\bandas.png")); // NOI18N
        bandButton.setToolTipText("Bands");
        bandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandButtonActionPerformed(evt);
            }
        });
        colorPanel.add(bandButton);

        changeBandBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        changeBandBox.setToolTipText("Change Band");
        changeBandBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBandBoxActionPerformed(evt);
            }
        });
        colorPanel.add(changeBandBox);

        toolBarDown.add(colorPanel);

        rotationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotation"));
        rotationPanel.setLayout(new javax.swing.BoxLayout(rotationPanel, javax.swing.BoxLayout.LINE_AXIS));

        rotationSlider.setMaximum(360);
        rotationSlider.setToolTipText("Rotation Complete");
        rotationSlider.setValue(0);
        rotationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotationSliderStateChanged(evt);
            }
        });
        rotationSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rotationSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotationSliderFocusLost(evt);
            }
        });
        rotationPanel.add(rotationSlider);

        rota90Button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\rotacion90.png")); // NOI18N
        rota90Button.setToolTipText("Rotation 90º");
        rota90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rota90ButtonActionPerformed(evt);
            }
        });
        rotationPanel.add(rota90Button);

        rota180Button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\rotacion180.png")); // NOI18N
        rota180Button.setToolTipText("Rotation 180º");
        rota180Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rota180ButtonActionPerformed(evt);
            }
        });
        rotationPanel.add(rota180Button);

        rota270Button.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\rotacion270.png")); // NOI18N
        rota270Button.setToolTipText("Rotation 270º");
        rota270Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rota270ButtonActionPerformed(evt);
            }
        });
        rotationPanel.add(rota270Button);

        toolBarDown.add(rotationPanel);

        escalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Escale"));
        escalePanel.setLayout(new javax.swing.BoxLayout(escalePanel, javax.swing.BoxLayout.LINE_AXIS));

        maxButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\aumentar.png")); // NOI18N
        maxButton.setToolTipText("Increase");
        maxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxButtonActionPerformed(evt);
            }
        });
        escalePanel.add(maxButton);

        minButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jota\\Desktop\\SMM\\PracticaFinal\\iconos\\disminuir.png")); // NOI18N
        minButton.setToolTipText("Decrease");
        minButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minButtonActionPerformed(evt);
            }
        });
        escalePanel.add(minButton);

        toolBarDown.add(escalePanel);

        thresholdingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Thresholding"));
        thresholdingPanel.setLayout(new java.awt.BorderLayout());

        thresholdingSlider.setMaximum(255);
        thresholdingSlider.setToolTipText("Thresholding value");
        thresholdingSlider.setValue(128);
        thresholdingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdingSliderStateChanged(evt);
            }
        });
        thresholdingSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                thresholdingSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                thresholdingSliderFocusLost(evt);
            }
        });
        thresholdingPanel.add(thresholdingSlider, java.awt.BorderLayout.CENTER);

        toolBarDown.add(thresholdingPanel);

        panelFooter.add(toolBarDown, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelFooter, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout mainDesktopLayout = new javax.swing.GroupLayout(mainDesktop);
        mainDesktop.setLayout(mainDesktopLayout);
        mainDesktopLayout.setHorizontalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1391, Short.MAX_VALUE)
        );
        mainDesktopLayout.setVerticalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 179, Short.MAX_VALUE)
        );

        getContentPane().add(mainDesktop, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        fileMenu.add(newMenu);

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setText("Open");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        toolBarUpMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        toolBarUpMenu.setText("View toolbar up");
        toolBarUpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBarUpMenuActionPerformed(evt);
            }
        });
        editMenu.add(toolBarUpMenu);

        toolBarDownMenu.setText("View toolbar down");
        toolBarDownMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolBarDownMenuActionPerformed(evt);
            }
        });
        editMenu.add(toolBarDownMenu);

        menuBar.add(editMenu);

        imageMenu.setText("Help");

        versionMenu.setText("Version");
        versionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                versionMenuActionPerformed(evt);
            }
        });
        imageMenu.add(versionMenu);

        menuBar.add(imageMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento boton "new" crea una nueva ventana con un rectangulo en blancoen a
     * partir de la esquina superior izquierda. A su vez no permite que se pinte
     * más allá de el propio rectangulo.
     * 
     * @param evt 
     */
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        vi = new InternalImageWindow(this);
        mainDesktop.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(1300, 700, BufferedImage.TYPE_INT_RGB);
        img.createGraphics().setPaint(Color.WHITE);
        img.createGraphics().fill(new Rectangle2D.Double(0,0,img.getWidth(), img.getHeight()) );
        vi.getLienzo().setImage(img);
        vi.getLienzo().setClip(new Rectangle2D.Double(0,0,img.getWidth(), img.getHeight()) );
    }//GEN-LAST:event_newButtonActionPerformed

    /**
     * Abre una image, video o sonido. Control de ventanas para evitar conflictos
     * entre ellas.
     * 
     * Extensiones de imagen: jpg,jpeg,png,gif
     * Extensiones de sonido: wav,au
     * Extensiones de video: avi,mp4
     * 
     * @param evt 
     */
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        JFileChooser dlg = new JFileChooser();
        //Seleccionamos los filtros que queremos
        FileNameExtensionFilter imageFilter = new FileNameExtensionFilter("Images","jpg","jpeg","png","gif");
        FileNameExtensionFilter soundFilter = new FileNameExtensionFilter("Sound","wav","au");
        FileNameExtensionFilter videoFilter = new FileNameExtensionFilter("Video","avi","mp4");
        
        //Añadimos los filtros
        dlg.setFileFilter(videoFilter);
        dlg.setFileFilter(soundFilter);
        dlg.setFileFilter(imageFilter);
        
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                
                System.out.println(dlg.getDescription(f));
                if( dlg.getDescription(f).endsWith("jpg") || dlg.getDescription(f).endsWith("jpeg") || dlg.getDescription(f).endsWith("png") || dlg.getDescription(f).endsWith("gif") ){
                    try{
                        BufferedImage img = ImageIO.read(f);
                        InternalImageWindow vi = new InternalImageWindow(this);
                        vi.getLienzo().setImage(img);
                        this.mainDesktop.add(vi);
                        vi.setTitle(f.getName());
                        vi.setVisible(true);
                        
                    }
                    catch (Exception ex){
                        System.err.println("Error al abir la imagen" + ex);
                    }
                }
                else if( dlg.getDescription(f).endsWith("wav") || dlg.getDescription(f).endsWith("au")){
                    File faux = new File(f.getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    this.listSoundBox.addItem(faux);
                }
                else if(dlg.getDescription(f).endsWith("avi") || dlg.getDescription(f).endsWith("mp4")){
                    InternalWindowSM vi = InternalVideoWindow.getInstance(f);
                    vi.setTitle("VLC");
                    this.mainDesktop.add(vi);
                    vi.setVisible(true);
                }
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo" + ex);
            }
        }

    }//GEN-LAST:event_openButtonActionPerformed

    /**
     * Reproduce un objeto de lista de sonidos.
     * 
     * @param evt 
     */
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        File f = (File) listSoundBox.getSelectedItem();
        if (f != null) {
            player = new SMClipPlayer(f);
            ((SMClipPlayer)player).addLineListener(new manejadorAudio()); 
            if (player != null) {
                player.play();
            }
        }
    }//GEN-LAST:event_playButtonActionPerformed

    /**
     * Pausa la reproduccion o revovina si está ya pausado.
     * A su vez si estas grabando también termina la grabación y la añade a la
     * lista de reproducción.
     * 
     * @param evt 
     */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        if (player != null) {
            player.stop();
        }
        if(rec != null){
            rec.stop();
            SMRecorder auxRec = (SMRecorder) rec;
            File f = (File) auxRec;
            File faux = new File(f.getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
            this.listSoundBox.addItem(faux);
        } 
    }//GEN-LAST:event_stopButtonActionPerformed

    /**
     * Inicia la grabación de sonido.
     * 
     * @param evt 
     */
    private void recordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordButtonActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            rec = new SMSoundRecorder(dlg.getSelectedFile());
            ((SMSoundRecorder)rec).addLineListener(new manejadorGrabacion());
            if(rec != null){
                rec.record();
            }
        }
    }//GEN-LAST:event_recordButtonActionPerformed

    /**
     * Inicia la WebCam.
     * 
     * @param evt 
     */
    private void camButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_camButtonActionPerformed
        InternalWindowSM vi = InternalCameraWindow.getInstance();      
        vi.setTitle("WebCam");
        this.mainDesktop.add(vi);
        vi.setVisible(true);
    }//GEN-LAST:event_camButtonActionPerformed

    /**
     * Toma una instantanea del video captado en ese momento por la WebCam
     * 
     * @param evt 
     */
    private void shotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shotButtonActionPerformed
        InternalWindowSM vi = InternalCameraWindow.getInstance();
        Webcam camera = vi.getCam();
        BufferedImage img = camera.getImage();
        //Creamos la ventana interna de imagen y la insertamos
        InternalWindowSM v = new InternalImageWindow(this);
        v.setTitle("Captura Webcam");
        v.getLienzo().setImage(img);
        this.mainDesktop.add(v);
        v.setVisible(true);
    }//GEN-LAST:event_shotButtonActionPerformed

    /**
     * Aumenta o disminuye el brillo de una imagen fuente.
     * 
     * @param evt 
     */
    private void shineSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_shineSliderStateChanged
        int aux = shineSlider.getValue();

        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            if (imgSource != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, aux, null);
                    rop.filter(imgSource, vi.getLienzo().getImage());
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        refreshDesktop();
    }//GEN-LAST:event_shineSliderStateChanged

    /**
     * En el momento en el que se selecciona el slider del brillo inicia la imagen
     * fuente.
     * 
     * @param evt 
     */
    private void shineSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_shineSliderFocusGained
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
            imgSource = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_shineSliderFocusGained

    /**
     * En el momento de perder el foco se establece el filtro en la imagen. No
     * hay vuelta atrás.
     * 
     * @param evt 
     */
    private void shineSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_shineSliderFocusLost
        imgSource = null;
    }//GEN-LAST:event_shineSliderFocusLost

    /**
     * Aplica un filtro seleccionado a una imagen fuente.
     * 
     * @param evt 
     */
    private void filterBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBoxActionPerformed
        String aux = this.filterBox.getSelectedItem().toString();

        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getImage();
            if (imgSource != null) {
                try {
                    Kernel k = KernelProducer.createKernel(0);

                    if (aux == "Media") {
                        k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                    } else if (aux == "Binomial") {
                        k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                    } else if (aux == "Enfoque") {
                        k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                    } else if (aux == "Relieve") {
                        k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                    } else if (aux == "Laplaciano") {
                        k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                    }

                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                    BufferedImage imgOut = cop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgOut);
                    vi.getLienzo().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_filterBoxActionPerformed

    /**
     * Aplica el efecto negativo a una imagen.
     * 
     * @param evt 
     */
    private void negativeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeButtonActionPerformed

        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getImage();
            if (imgSource != null) {
                try {
                    byte f[] = new byte[256];
                    for (int i = 0; i < 256; i++) {
                        f[i] = (byte) (255 - i); //Negativo
                    }
                    ByteLookupTable It = new ByteLookupTable(0, f);
                    LookupOp lop = new LookupOp(It, null);
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_negativeButtonActionPerformed

    /**
     * Aplica un efecto ilumnado a una imagen.
     * 
     * @param evt 
     */
    private void lightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lightButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    
                    LookupTable lt = LookupTableProducer.createLookupTable(4);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_lightButtonActionPerformed
    
    /**
     * Aplica un efecto oscurecedor a una imagen.
     * 
     * @param evt 
     */
    private void darkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    
                    LookupTable lt = LookupTableProducer.createLookupTable(3);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_darkButtonActionPerformed

    /**
     * Aplica el operador sinoidal a una imagen.
     * 
     * @param evt 
     */
    private void sinButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    LookupTable lt = this.sSin(180.0 / 255.0);//Metodo 1

                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imgSource, imgSource);

                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_sinButtonActionPerformed

    /**
     * Aplica el operador sepia a una imagen.
     * 
     * @param evt 
     */
    private void sepiaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaButtonActionPerformed
        
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try {
                SepiaOp sepia = new SepiaOp();
                sepia.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e) {
                System.err.println("Error");
            }
        }
    }//GEN-LAST:event_sepiaButtonActionPerformed

    /**
     * Aplica un efecto tintado a una imagen, en función del color seleccionado.
     * 
     * @param evt 
     */
    private void tintaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tintaButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                try{
                    TintOp t = new TintOp(color, (float) 0.5);
                    t.filter(imgSource, imgSource);
                            
                    this.refreshDesktop();
                }catch(Exception ex){
                    System.err.println("Error");
                }
            }
        
        }
    }//GEN-LAST:event_tintaButtonActionPerformed

    /**
     * Aplica efecto ecualización a una imagen.
     * 
     * @param evt 
     */
    private void ecualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ecualizarButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        if(vi != null){
            BufferedImage imgSource = vi.getLienzo().getImage();
            if(imgSource != null){
                try{
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(imgSource,imgSource);
                    this.refreshDesktop();
                }catch(Exception ex){
                    System.err.println("Error");
                }
            }
        
        }
    }//GEN-LAST:event_ecualizarButtonActionPerformed

    /**
     * Inicializa la imagen fuente al ganar el foco.
     * 
     * @param evt 
     */
    private void thresholdingSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_thresholdingSliderFocusGained
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
            imgSource = new BufferedImage(cm, raster, alfaPre, null);
        }
    }//GEN-LAST:event_thresholdingSliderFocusGained

    /**
     * Establece el valor medio del slider y establece el efecto a la foto.
     * 
     * @param evt 
     */
    private void thresholdingSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_thresholdingSliderFocusLost
        imgSource = null;
        thresholdingSlider.setValue(128);
    }//GEN-LAST:event_thresholdingSliderFocusLost

    /**
     * Aplica el operador umbralización a una imagen, el valor del umbral varía
     * según el valor del slider.
     * 
     * @param evt 
     */
    private void thresholdingSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdingSliderStateChanged
        int umbral = thresholdingSlider.getValue();
        
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if(vi!=null){
            BufferedImage imgSource = vi.getImage();
            if(imgSource != null){
                try{
                    
                    UmbralizacionOp uOP = new UmbralizacionOp(umbral);
                    uOP.filter( imgSource , vi.getLienzo().getImage());
                    vi.getLienzo().repaint();
                    
                }
                catch (Exception ex){
                    System.err.println("Error");
                }
            }
        }
        
        refreshDesktop();
    }//GEN-LAST:event_thresholdingSliderStateChanged

    /**
     * Aplica un efecto contraste a una imagen.
     * 
     * @param evt 
     */
    private void contrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    
                    LookupTable lt = LookupTableProducer.createLookupTable(1);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_contrastButtonActionPerformed

    /**
     * Muestra las bandas de una imágen RGB
     * 
     * @param evt 
     */
    private void bandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    for (int i = 0; i < imgSource.getRaster().getNumBands(); i++) {
                        BufferedImage imgBanda = getBand(i, imgSource);
                        InternalImageWindow vi2 = new InternalImageWindow(this);
                        vi2.getLienzo().setImage(imgBanda);
                        vi2.setTitle("Banda:" + i);
                        mainDesktop.add(vi2);
                        vi2.setVisible(true);
                    }
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_bandButtonActionPerformed

    /**
     * Muestra las distintas bandas de una imagen según se seleccione.
     * 
     * @param evt 
     */
    private void changeBandBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeBandBoxActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    String aux = this.changeBandBox.getSelectedItem().toString();
                    boolean isRGB = imgSource.getColorModel().getColorSpace().isCS_sRGB();
                    if (aux == "RGB") {
                        if (!isRGB) {
                            ColorModel cm = vi.getLienzo().getImage().getColorModel();
                            WritableRaster raster = vi.getLienzo().getImage().copyData(null);
                            boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
                            BufferedImage imgNew = new BufferedImage(cm, raster, alfaPre, null);
                            InternalImageWindow vi2 = new InternalImageWindow(this);
                            vi2.getLienzo().setImage(imgNew);
                            vi2.setTitle("Banda: RGB");
                            mainDesktop.add(vi2);
                            vi2.setVisible(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "La imagen esta en sRGB");
                        }
                    } else if (aux == "YCC") {
                        if (isRGB) {
                            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            BufferedImage imgNew = null;
                            imgNew = cop.filter(imgSource, null);
                            InternalImageWindow vi2 = new InternalImageWindow(this);
                            vi2.getLienzo().setImage(imgNew);
                            vi2.setTitle("Banda: YCC");
                            mainDesktop.add(vi2);
                            vi2.setVisible(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "La imagen no es sRGB");
                        }
                    } else if (aux == "GREY") {
                        if (imgSource.getRaster().getNumBands() > 1) {
                            ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                            ColorConvertOp cop = new ColorConvertOp(cs, null);
                            BufferedImage imgNew = null;
                            imgNew = cop.filter(imgSource, null);
                            InternalImageWindow vi2 = new InternalImageWindow(this);
                            vi2.getLienzo().setImage(imgNew);
                            vi2.setTitle("Banda: GRAY");
                            mainDesktop.add(vi2);
                            vi2.setVisible(true);
                        } else {
                            JOptionPane.showMessageDialog(this, "La imagen ya es gris");
                        }
                    }
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_changeBandBoxActionPerformed

    /**
     * Rota la imagen libremente en función del valor del slider.
     * 
     * @param evt 
     */
    private void rotationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotationSliderStateChanged
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());

        if (vi != null) {
            AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(rotationSlider.getValue()), imgSource.getWidth() / 2, imgSource.getHeight() / 2);
            if (imgSource != null) {
                try {
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_rotationSliderStateChanged

    /**
     * Inicializa la imagen fuente.
     * 
     * @param evt 
     */
    private void rotationSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotationSliderFocusGained
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            ColorModel cm = vi.getLienzo().getImage().getColorModel();
            WritableRaster raster = vi.getLienzo().getImage().copyData(null);
            boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
            imgSource = new BufferedImage(cm, raster, alfaPre, null);
        }

    }//GEN-LAST:event_rotationSliderFocusGained

    /**
     * Se aplica la rotación a la imagen definitivamente.
     * 
     * @param evt 
     */
    private void rotationSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotationSliderFocusLost
        imgSource = null;
    }//GEN-LAST:event_rotationSliderFocusLost

    /**
     * Rota la imagen 90º.
     * 
     * @param evt 
     */
    private void rota90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rota90ButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(90.0), imgSource.getWidth() / 2, imgSource.getHeight() / 2);
            if (imgSource != null) {
                try {
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_rota90ButtonActionPerformed

    /**
     * Rota la imagen 180º.
     * 
     * @param evt 
     */
    private void rota180ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rota180ButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180.0), imgSource.getWidth() / 2, imgSource.getHeight() / 2);
            if (imgSource != null) {
                try {
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_rota180ButtonActionPerformed

    /**
     * Rota la imagen 270º.
     * 
     * @param evt 
     */
    private void rota270ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rota270ButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(270.0), imgSource.getWidth() / 2, imgSource.getHeight() / 2);
            if (imgSource != null) {
                try {
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_rota270ButtonActionPerformed

    /**
     * Zoom positivo a una imagen.
     * 
     * @param evt 
     */
    private void maxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_maxButtonActionPerformed

    /**
     * Zoom negativo a una imagen.
     * 
     * @param evt 
     */
    private void minButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error");
                }
            }
        }
    }//GEN-LAST:event_minButtonActionPerformed

    /**
     * Aplica mi operador MyLookUpTable a una imagen.
     * 
     * @param evt 
     */
    private void myLookUpTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myLookUpTableActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            if (imgSource != null) {
                try {
                    LookupTable lt = MyLookUp.myCreateLookUptable(1);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter(imgSource, null);
                    vi.getLienzo().setImage(imgdest);
                    vi.getLienzo().repaint();
                } catch (Exception e) {
                    System.err.println("Error"+e);
                }
            }
        }
    }//GEN-LAST:event_myLookUpTableActionPerformed

    /**
     * Aplica el filtro Pi a una imagen.
     * 
     * @param evt 
     */
    private void PiOpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PiOpButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImage();
            try {
                PiOp pi = new PiOp();
                pi.filter(imgSource, imgSource);
                vi.repaint();
            } catch (Exception e) {
                System.err.println("Error");
            }
        }
    }//GEN-LAST:event_PiOpButtonActionPerformed

    /**
     * Aplica el efecto Fantasma a una imagen.
     * 
     * @param evt 
     */
    private void ghostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ghostButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        if (vi != null) {
            BufferedImage imgSource = vi.getImage();
            if (imgSource != null) {
                try {
                    MyFunction mf = new MyFunction(0, 0, null);
                    BufferedImage imgD = mf.Actua(imgSource);
                    InternalWindowSM v = new InternalImageWindow();
                    v.setLocation(300, 300);
                    v.getLienzo().setImage(imgD);
                    v.setTitle("Operation");
                    mainDesktop.add(v);
                    v.setVisible(true);
                    v.repaint();
                    
                   
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        refreshDesktop();
    }//GEN-LAST:event_ghostButtonActionPerformed

    /**
     * Selecciona la herramienta "Rectangulo".
     * 
     * @param evt 
     */
    private void rectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectButtonActionPerformed

        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(3);
    }//GEN-LAST:event_rectButtonActionPerformed

    /**
     * Modificar el grosor de una forma.
     * 
     * @param evt 
     */
    private void thiknesSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thiknesSpinnerStateChanged
        int tam = (int) this.thiknesSpinner.getValue();
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setStroke(tam);
    }//GEN-LAST:event_thiknesSpinnerStateChanged

    /**
     * Establece el relleno de una figura.
     * 
     * @param evt 
     */
    private void filledButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        if(this.filledButton.isSelected()){
            vi.getLienzo().setFill(true);
            vi.getLienzo().setFillH(false);
            vi.getLienzo().setFillV(false);
        }
        else{
            vi.getLienzo().setFill(false);
        }
    }//GEN-LAST:event_filledButtonActionPerformed

    /**
     * Establece el valor de transparencia de una figura.
     * 
     * @param evt 
     */
    private void ClaritySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ClaritySliderStateChanged
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setClarity( this.ClaritySlider.getValue()/100.0f );
    }//GEN-LAST:event_ClaritySliderStateChanged

    /**
     * Establece si una figura tiene transparencia o no.
     * 
     * @param evt 
     */
    private void ClarityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClarityButtonActionPerformed
        if(ClarityButton.isSelected()){
            this.ClaritySlider.setEnabled(true);
        }else{
            this.ClaritySlider.setEnabled(false);
        }
        
    }//GEN-LAST:event_ClarityButtonActionPerformed

    /**
     * Establece el tipo de borde de una figura.
     * 
     * @param evt 
     */
    private void TypeStrokeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeStrokeBoxActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        String type = this.TypeStrokeBox.getSelectedItem().toString();
        vi.getLienzo().setBorder(type);
    }//GEN-LAST:event_TypeStrokeBoxActionPerformed

    /**
     * Establece si una figura es alisada o no.
     * 
     * @param evt 
     */
    private void SmoothButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmoothButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setSmooth(this.SmoothButton.isSelected());
    }//GEN-LAST:event_SmoothButtonActionPerformed

    /**
     * Establece el color del borde de una figura.
     * 
     * @param evt 
     */
    private void BorderColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BorderColorPanelMouseClicked
        JColorChooser ventanaDeColores=new JColorChooser();
        color=ventanaDeColores.showDialog(null, "Seleccione un Color", Color.black);
        BorderColorPanel.setBackground(color);
        
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        
        vi.getLienzo().SetColor(color);
        repaint();
  
        
    }//GEN-LAST:event_BorderColorPanelMouseClicked

    /**
     * Establece el color del relleno de una figura.
     * 
     * @param evt 
     */
    private void BackgroundColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackgroundColorPanelMouseClicked
        JColorChooser ventanaDeColores=new JColorChooser();
        secondColor=ventanaDeColores.showDialog(null, "Seleccione un Color", Color.white);
        BackgroundColorPanel.setBackground(secondColor);
        
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        
        vi.getLienzo().SetBackgroundColor(secondColor);
        repaint();
  
    }//GEN-LAST:event_BackgroundColorPanelMouseClicked

    /**
     * Selecciona la herramienta "Elipse".
     * 
     * @param evt 
     */
    private void ovalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovalButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(4);
    }//GEN-LAST:event_ovalButtonActionPerformed

    /**
     * Selecciona la herramienta "Linea".
     * 
     * @param evt 
     */
    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(2);
    }//GEN-LAST:event_lineButtonActionPerformed

    /**
     * Selecciona la herramienta "Punto".
     * 
     * @param evt 
     */
    private void pointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(1);
    }//GEN-LAST:event_pointButtonActionPerformed

    /**
     * Selecciona la herramienta "Curva con un punto de control".
     * 
     * @param evt 
     */
    private void lineArcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineArcButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(5);
    }//GEN-LAST:event_lineArcButtonActionPerformed

    /**
     * Selecciona la herramienta "Espiral".
     * 
     * @param evt 
     */
    private void espiralButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espiralButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(6);
    }//GEN-LAST:event_espiralButtonActionPerformed

    /**
     * Selecciona la herramienta "Trazo Libre".
     * 
     * @param evt 
     */
    private void freeDrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_freeDrawButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(7);
    }//GEN-LAST:event_freeDrawButtonActionPerformed

    /**
     * Selecciona la herramienta "Mi forma".
     * 
     * @param evt 
     */
    private void myFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myFormButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(8);
    }//GEN-LAST:event_myFormButtonActionPerformed

    /**
     * Selecciona la herramienta "Editar".
     * 
     * @param evt 
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setTool(9);
    }//GEN-LAST:event_editButtonActionPerformed
    
    /**
     * Mueve una posición hacia arriba la figura.
     * 
     * @param evt 
     */
    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setUp();
    }//GEN-LAST:event_moveUpButtonActionPerformed

    /**
     * Mueve una posición hacia abajo la figura.
     * 
     * @param evt 
     */
    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setDown();
    }//GEN-LAST:event_moveDownButtonActionPerformed

    /**
     * Mueve arriba del todo en el vector de formas la figura.
     * 
     * @param evt 
     */
    private void moveUpAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpAllButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setUpAll();
    }//GEN-LAST:event_moveUpAllButtonActionPerformed

    /**
     * Mueve abajo del todo en el vector de formas la figura.
     * 
     * @param evt 
     */
    private void moveDownAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownAllButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        vi.getLienzo().setDownAll();
    }//GEN-LAST:event_moveDownAllButtonActionPerformed

    /**
     * Guarda una imagen.
     * 
     * @param evt 
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        
        if( this.vi instanceof InternalImageWindow ){
        
        JFileChooser dlg = new JFileChooser();    
        dlg.setSelectedFile(new File(vi.getTitle()));
        
        FileNameExtensionFilter t1 = new FileNameExtensionFilter("GIF", "gif");
        FileNameExtensionFilter t2 = new FileNameExtensionFilter("PNG", "png");
        FileNameExtensionFilter t3 = new FileNameExtensionFilter("JPG", "jpg");
        
        dlg.setFileFilter(t1);
        dlg.setFileFilter(t2);
        dlg.setFileFilter(t3);
      
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
           
                try{
                    BufferedImage img = vi.getLienzo().getImage(true);
                                 
                    if(img != null){
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    }                    
                }
                catch (Exception ex){
                    System.err.println("Error al guardar la imagen" + ex);
                }
            }
        }     
        
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * Establece relleno vertical a una forma.
     * 
     * @param evt 
     */
    private void filledVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledVButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        if(this.filledVButton.isSelected()){
            vi.getLienzo().setFillV(true);
            vi.getLienzo().setFillH(false);
            vi.getLienzo().setFill(false);
        }
        else{
            vi.getLienzo().setFillV(false);
        }
    }//GEN-LAST:event_filledVButtonActionPerformed

    /**
     * Establece relleno horizontal a una forma.
     * 
     * @param evt 
     */
    private void filledHButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filledHButtonActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        if(this.filledHButton.isSelected()){
            vi.getLienzo().setFillH(true);
            vi.getLienzo().setFillV(false);
            vi.getLienzo().setFill(false);
        }
        else{
            vi.getLienzo().setFillH(false);
        }
    }//GEN-LAST:event_filledHButtonActionPerformed

    /**
     * Copia una imagen cargada previamente.
     * 
     * @param evt 
     */
    private void CopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyButtonActionPerformed
       
        InternalWindowSM vi = (InternalWindowSM) (mainDesktop.getSelectedFrame());
        this.imgSource = vi.getLienzo().getImage();
        
        if (vi != null) {
            if (imgSource != null) {
                try {
                    ColorModel cm = vi.getLienzo().getImage().getColorModel();
                    WritableRaster raster = vi.getLienzo().getImage().copyData(null);
                    boolean alfaPre = vi.getLienzo().getImage().isAlphaPremultiplied();
                    BufferedImage imgSourceNew = new BufferedImage(cm, raster, alfaPre, null);
                    
                    InternalWindowSM v = new InternalImageWindow();
                    v.setLocation(300, 300);
                    v.getLienzo().setImage(imgSourceNew);
                    v.setTitle("Copia");
                    mainDesktop.add(v);
                    v.setVisible(true);
                    v.repaint();
                    
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        refreshDesktop();
        
        
    }//GEN-LAST:event_CopyButtonActionPerformed

    /**
     * Muestra el nombre de la aplicación, el nombre del programador y la versión.
     * 
     * @param evt 
     */
    private void versionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_versionMenuActionPerformed
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        String s = "Programa: Paint Final \nProgramador: Javier Galera Garrido \nVersion:1.0";
        JOptionPane.showMessageDialog(vi, s);

        
        
    }//GEN-LAST:event_versionMenuActionPerformed

    /**
     * Botón nuevo del menú. Actúa como el botón "Nuevo"
     * 
     * @param evt 
     */
    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        vi = new InternalImageWindow(this);
        mainDesktop.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(1300, 700, BufferedImage.TYPE_INT_RGB);
        img.createGraphics().setPaint(Color.WHITE);
        img.createGraphics().fill(new Rectangle2D.Double(0,0,img.getWidth(), img.getHeight()) );
        vi.getLienzo().setImage(img);
        vi.getLienzo().setClip(new Rectangle2D.Double(0,0,img.getWidth(), img.getHeight()) );
    }//GEN-LAST:event_newMenuActionPerformed
    
    /**
     * Botón abrir del menú. Actúa como el botón "Abrir"
     * 
     * @param evt 
     */
    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        //Seleccionamos los filtros que queremos
        FileNameExtensionFilter imageFilter = new FileNameExtensionFilter("Images","jpg","jpeg","png","gif");
        FileNameExtensionFilter soundFilter = new FileNameExtensionFilter("Sound","wav","au");
        FileNameExtensionFilter videoFilter = new FileNameExtensionFilter("Video","avi","mp4");
        
        //Añadimos los filtros
        dlg.setFileFilter(videoFilter);
        dlg.setFileFilter(soundFilter);
        dlg.setFileFilter(imageFilter);
        
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                
                System.out.println(dlg.getDescription(f));
                if( dlg.getDescription(f).endsWith("jpg") || dlg.getDescription(f).endsWith("jpeg") || dlg.getDescription(f).endsWith("png") || dlg.getDescription(f).endsWith("gif") ){
                    try{
                        BufferedImage img = ImageIO.read(f);
                        InternalImageWindow vi = new InternalImageWindow(this);
                        vi.getLienzo().setImage(img);
                        this.mainDesktop.add(vi);
                        vi.setTitle(f.getName());
                        vi.setVisible(true);
                        
                    }
                    catch (Exception ex){
                        System.err.println("Error al abir la imagen" + ex);
                    }
                }
                else if( dlg.getDescription(f).endsWith("wav") || dlg.getDescription(f).endsWith("au")){
                    File faux = new File(f.getAbsolutePath()) {
                        @Override
                        public String toString() {
                            return this.getName();
                        }
                    };
                    this.listSoundBox.addItem(faux);
                }
                else if(dlg.getDescription(f).endsWith("avi") || dlg.getDescription(f).endsWith("mp4")){
                    InternalWindowSM vi = InternalVideoWindow.getInstance(f);
                    vi.setTitle("VLC");
                    this.mainDesktop.add(vi);
                    vi.setVisible(true);
                }
            } catch (Exception ex) {
                System.err.println("Error al leer el archivo" + ex);
            }
        }
    }//GEN-LAST:event_openMenuActionPerformed

    /**
     * Botón guardar del menú. Actúa como el botón "Guardar"
     * 
     * @param evt 
     */
    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
         
        InternalWindowSM vi = (InternalWindowSM) this.mainDesktop.getSelectedFrame();
        
        if( this.vi instanceof InternalImageWindow ){
        
        JFileChooser dlg = new JFileChooser();    
        dlg.setSelectedFile(new File(vi.getTitle()));
        
        FileNameExtensionFilter t1 = new FileNameExtensionFilter("GIF", "gif");
        FileNameExtensionFilter t2 = new FileNameExtensionFilter("PNG", "png");
        FileNameExtensionFilter t3 = new FileNameExtensionFilter("JPG", "jpg");
        
        dlg.setFileFilter(t1);
        dlg.setFileFilter(t2);
        dlg.setFileFilter(t3);
      
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
           
                try{
                    BufferedImage img = vi.getLienzo().getImage(true);
                                 
                    if(img != null){
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    }                    
                }
                catch (Exception ex){
                    System.err.println("Error al guardar la imagen" + ex);
                }
            }
        }     
    }//GEN-LAST:event_saveMenuActionPerformed

    /**
     * Muestra u oculta la barra de herramientas superior.
     * 
     * @param evt 
     */
    private void toolBarUpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBarUpMenuActionPerformed
        if(toolBarTop.isVisible())
            this.toolBarTop.setVisible(false);
        else if(!toolBarTop.isVisible())
            this.toolBarTop.setVisible(true);
    }//GEN-LAST:event_toolBarUpMenuActionPerformed

     /**
     * Muestra u oculta la barra de herramientas inferior.
     * 
     * @param evt 
     */
    private void toolBarDownMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolBarDownMenuActionPerformed
        if(toolBarDown.isVisible())
            this.toolBarDown.setVisible(false);
        else if(!toolBarDown.isVisible())
            this.toolBarDown.setVisible(true);
    }//GEN-LAST:event_toolBarDownMenuActionPerformed

    /**
     * Devuelve las bandas de una imagen, si es RGB 3 , si es de grises 1 , etc.
     * 
     * @param iBand numero de banda
     * @param img imagen
     * @return imagen de la banda
     */
    private BufferedImage getBand(int iBand, BufferedImage img) {
        ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        ComponentColorModel cm = new ComponentColorModel(cs, false, false,
                Transparency.OPAQUE,
                DataBuffer.TYPE_BYTE);
        int bandList[] = {iBand};
        WritableRaster bandRaster = (WritableRaster) img.getRaster().createWritableChild(
                0, 0, img.getWidth(), img.getHeight(), 0, 0, bandList);
        BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);
        return imgBanda;
    }
    
    /**
     * Crea un objeto LookUpTable para aplicar un filtro a una imagen
     * 
     * @param w radio
     * @return objeto LookUpTable
     */
    public static LookupTable sSin(double w) {
        double K = 255.0;
        byte lt[] = new byte[256];
        lt[0] = 0;
        for (int l = 1; l < 256; l++) {
            lt[l] = (byte) (K * (abs(sin(toRadians(w) * l))));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;

    }
    
    /**
     * Actualiza el escritorio
     */
    public void refreshDesktop() {
        this.mainDesktop.repaint();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BackgroundColorPanel;
    private javax.swing.JPanel BorderColorPanel;
    private javax.swing.JToggleButton ClarityButton;
    private javax.swing.JSlider ClaritySlider;
    private javax.swing.JButton CopyButton;
    private javax.swing.JButton PiOpButton;
    private javax.swing.JToggleButton SmoothButton;
    private javax.swing.JComboBox<String> TypeStrokeBox;
    private javax.swing.JButton bandButton;
    private javax.swing.JButton camButton;
    private javax.swing.JComboBox<String> changeBandBox;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JButton contrastButton;
    private javax.swing.JPanel contrastPanel;
    private javax.swing.JButton darkButton;
    private javax.swing.JButton ecualizarButton;
    private javax.swing.JToggleButton editButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JPanel escalePanel;
    private javax.swing.JToggleButton espiralButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JToggleButton filledButton;
    private javax.swing.ButtonGroup filledGroupButton;
    private javax.swing.JToggleButton filledHButton;
    private javax.swing.JToggleButton filledVButton;
    private javax.swing.JComboBox<String> filterBox;
    private javax.swing.JPanel filterPanel;
    private javax.swing.ButtonGroup formGroupButton;
    private javax.swing.JToggleButton freeDrawButton;
    private javax.swing.JButton ghostButton;
    private javax.swing.JMenu imageMenu;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JButton lightButton;
    private javax.swing.JToggleButton lineArcButton;
    private javax.swing.JToggleButton lineButton;
    private javax.swing.JComboBox<File> listSoundBox;
    private javax.swing.JDesktopPane mainDesktop;
    private javax.swing.JButton maxButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton minButton;
    private javax.swing.JButton moveDownAllButton;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpAllButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JToggleButton myFormButton;
    private javax.swing.JButton myLookUpTable;
    private javax.swing.JButton negativeButton;
    private javax.swing.JButton newButton;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JPanel noNamePanel;
    private javax.swing.JButton openButton;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JToggleButton ovalButton;
    private javax.swing.JPanel panelFooter;
    private javax.swing.JButton playButton;
    private javax.swing.JToggleButton pointButton;
    private javax.swing.JButton recordButton;
    private javax.swing.JToggleButton rectButton;
    private javax.swing.JButton rota180Button;
    private javax.swing.JButton rota270Button;
    private javax.swing.JButton rota90Button;
    private javax.swing.JPanel rotationPanel;
    private javax.swing.JSlider rotationSlider;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JToolBar.Separator separator;
    private javax.swing.JToolBar.Separator separator2;
    private javax.swing.JButton sepiaButton;
    private javax.swing.JPanel shinePanel;
    private javax.swing.JSlider shineSlider;
    private javax.swing.JButton shotButton;
    private javax.swing.JButton sinButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton stopButton;
    private javax.swing.JSpinner thiknesSpinner;
    private javax.swing.JPanel thresholdingPanel;
    private javax.swing.JSlider thresholdingSlider;
    private javax.swing.JButton tintaButton;
    private javax.swing.JToolBar toolBarDown;
    private javax.swing.JMenuItem toolBarDownMenu;
    private javax.swing.JToolBar toolBarTop;
    private javax.swing.JMenuItem toolBarUpMenu;
    private javax.swing.JMenuItem versionMenu;
    // End of variables declaration//GEN-END:variables
}
